name: CD

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'
      - 'LICENSE'
      - '.github/**'

jobs:
  build-and-push:
    name: Build and Push Docker Image to ECR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Verify AWS Authentication
        run: aws sts get-caller-identity

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and Push Docker Image to ECR
        run: |
          docker buildx build --platform linux/amd64 \
            --push \
            -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/flask-repository \
            -f Dockerfile.prod .

      - name: Extract Task Definition
        id: ecs-task-definition
        run: |
          aws ecs describe-task-definition \
            --task-definition flask-task \
            --query 'taskDefinition' \
            --output json > ecs-task-def.json

      - name: Remove unsupported fields from task definition
        run: |
          jq 'del(.enableFaultInjection)' ecs-task-def.json > ecs-task-def.cleaned.json
          mv ecs-task-def.cleaned.json ecs-task-def.json

      - name: Extract Image Digest
        id: image-digest
        run: |
          IMAGE_URI="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/flask-repository"
          DIGEST=$(aws ecr describe-images \
            --repository-name flask-repository \
            --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageDigest' \
            --output text)
          echo "image=$IMAGE_URI@$DIGEST" >> "$GITHUB_OUTPUT"

      - name: Render Amazon ECS Task Definition
        id: render-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ecs-task-def.json
          container-name: flask-web
          image: ${{ steps.image-digest.outputs.image }}

      - name: Deploy Amazon ECS Task Definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-task-def.outputs.task-definition }}
          service: flask-service-rolling-update
          cluster: flask-cluster
          wait-for-service-stability: true
