name: CD to AWS ECR

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    name: Build and Push Docker Image to ECR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: Verify AWS Authentication
        run: aws sts get-caller-identity

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and Push Docker Image to ECR
        run: |
          docker buildx build --platform linux/amd64 \
            --push \
            -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-northeast-1.amazonaws.com/flask-repository:latest \
            -f Dockerfile.prod .

      - name: Deploy to ECS via CodeDeploy
        run: |
          TASK_DEFINITION_ARN=$(aws ecs list-task-definitions --sort DESC --query "taskDefinitionArns[0]" --output text)

          JSON_PAYLOAD=$(jq -n \
            --arg taskDefArn "$TASK_DEFINITION_ARN" \
            '{
              applicationName: "flask-deploy",
              deploymentGroupName: "flask-deploy-group",
              revision: {
                revisionType: "AppSpecContent",
                appSpecContent: {
                  content: {
                    version: 0.0,
                    Resources: [
                      {
                        TargetService: {
                          Type: "AWS::ECS::Service",
                          Properties: {
                            TaskDefinition: $taskDefArn,
                            LoadBalancerInfo: {
                              ContainerName: "flask-web",
                              ContainerPort: 5000
                            }
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }')

          echo "======== JSON Payload ========"
          echo "$JSON_PAYLOAD" | jq '.'
          echo "=============================="

          DEPLOY_RESPONSE=$(aws deploy create-deployment \
            --cli-input-json "$JSON_PAYLOAD" \
            --region ap-northeast-1 2>&1)

          echo "======== Deployment Response ========"
          echo "$DEPLOY_RESPONSE" | jq '.'
          echo "====================================="
