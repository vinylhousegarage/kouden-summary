name: CD to AWS ECR

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    name: Build and Deploy to AWS ECS
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: Verify AWS Authentication
        run: aws sts get-caller-identity

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set IMAGE_TAG
        run: echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and Push Docker Image to ECR
        run: |
          docker buildx build --platform linux/amd64 \
            --push \
            -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-northeast-1.amazonaws.com/flask-repository:$IMAGE_TAG \
            -f Dockerfile.prod .

      - name: Get Image Digest
        id: get-image-digest
        run: |
          IMAGE_DIGEST=$(aws ecr describe-images \
            --repository-name flask-repository \
            --image-ids imageTag=$IMAGE_TAG \
            --query 'imageDetails[0].imageDigest' \
            --output text)
          echo "IMAGE_DIGEST=$IMAGE_DIGEST" >> $GITHUB_ENV

      - name: Update Task Definition
        id: render-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: flask-web
          image: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-northeast-1.amazonaws.com/flask-repository@sha256:${{ env.IMAGE_DIGEST }}

      - name: Register New Task Definition
        run: |
          aws ecs register-task-definition --cli-input-json file://${{ steps.render-task-def.outputs.task-definition }}

      - name: Deploy to ECS via CodeDeploy
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.render-task-def.outputs.task-definition }}
          service: flask-service
          cluster: flask-cluster
          wait-for-service-stability: true
          codedeploy-appspec: appspec.yml
          codedeploy-application: flask-deploy
          codedeploy-deployment-group: flask-deploy-group
